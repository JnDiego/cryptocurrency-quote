{"version":3,"sources":["cryptomonedas.png","hooks/useCurrency.jsx","hooks/useCryptocurrency.jsx","components/Error.jsx","components/Form.jsx","components/Quotation.jsx","components/Spinner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","SelectComponent","select","useCurrency","initialState","OPTIONS","useState","state","setState","htmlFor","name","id","onChange","event","target","value","map","option","key","code","useCryptocurrency","CoinInfo","Id","Name","FullName","ErrorMessage","p","propTypes","message","PropTypes","string","isRequired","Error","Button","input","Form","setCurrency","setCryptocurrency","listcrypto","setListcrypto","error","setError","currency","SelectCurrency","cryptocurrency","SelectCryptocurrency","useEffect","a","axios","get","result","data","Data","fetchAPI","action","onSubmit","preventDefault","trim","type","ResultContainer","div","Info","Price","Quotation","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Container","Image","img","MainHeader","h1","App","setResult","loading","setLoading","url","setTimeout","DISPLAY","quoteCryptocurrency","component","src","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cb67253a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst SelectComponent = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCurrency = (label, initialState, OPTIONS) => {\r\n  // State de nuestro custom hook\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const Select = () => (\r\n    <Fragment>\r\n      <Label htmlFor=\"currency\">{label}</Label>\r\n      <SelectComponent name=\"currency\" id=\"currency\" onChange={(event) => setState(event.target.value)} value={state}>\r\n        <option value=\"\">- Select -</option>\r\n        {OPTIONS.map((option) => (\r\n          <option key={option.code} value={option.code}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n        ;\r\n      </SelectComponent>\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y función que modifica el state\r\n  return [state, Select, setState];\r\n};\r\n\r\nuseCurrency.propTypes = {\r\n  label: PropTypes.string,\r\n  initialState: PropTypes.string,\r\n  OPTIONS: PropTypes.string,\r\n};\r\n\r\nexport default useCurrency;\r\n","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst SelectComponent = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  -webkit-appearance: none;\r\n  border-radius: 10px;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCryptocurrency = (label, initialState, OPTIONS) => {\r\n  // State de nuestro custom hook\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const SelectCryptocurrency = () => (\r\n    <Fragment>\r\n      <Label htmlFor=\"currency\">{label}</Label>\r\n      <SelectComponent name=\"currency\" id=\"currency\" onChange={(event) => setState(event.target.value)} value={state}>\r\n        <option value=\"\">- Select -</option>\r\n        {OPTIONS.map((option) => (\r\n          <option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>\r\n            {option.CoinInfo.FullName}\r\n          </option>\r\n        ))}\r\n        ;\r\n      </SelectComponent>\r\n    </Fragment>\r\n  );\r\n\r\n  // Retornar state, interfaz y función que modifica el state\r\n  return [state, SelectCryptocurrency, setState];\r\n};\r\n\r\nuseCryptocurrency.propTypes = {\r\n  label: PropTypes.string,\r\n  initialState: PropTypes.string,\r\n  OPTIONS: PropTypes.string,\r\n};\r\n\r\nexport default useCryptocurrency;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ErrorMessage = styled.p`\r\n  background-color: #b7322c;\r\n  padding: 1rem;\r\n  color: #fff;\r\n  font-size: 30px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({ message }) => {\r\n  return <ErrorMessage>{message}</ErrorMessage>;\r\n};\r\n\r\nErrorMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Error;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCryptocurrency from '../hooks/useCryptocurrency';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\n\r\nconst Button = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Form = ({ setCurrency, setCryptocurrency }) => {\r\n  // State de listado de criptomonedas\r\n  const [listcrypto, setListcrypto] = useState([]);\r\n  const [error, setError] = useState(false);\r\n\r\n  const CURRENCIES = [\r\n    { code: 'USD', name: 'US Dollar' },\r\n    { code: 'MXN', name: 'Mexican Peso' },\r\n    { code: 'COP', name: 'Colombian Peso' },\r\n    { code: 'EUR', name: 'Euro' },\r\n    { code: 'GBP', name: 'Pound Sterling' },\r\n  ];\r\n\r\n  // Utilizar useCurrency\r\n  const [currency, SelectCurrency] = useCurrency('Select your currency', '', CURRENCIES);\r\n  // Utilizar useCryptocurrency\r\n  const [cryptocurrency, SelectCryptocurrency] = useCryptocurrency('Select your cryptocurrency', '', listcrypto);\r\n  // Ejecutar llamado a la API\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const url = `https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD`;\r\n      const result = await axios.get(url);\r\n      setListcrypto(result.data.Data);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  // Cuando el usuario hace submit\r\n  const quoteCurrency = (event) => {\r\n    event.preventDefault();\r\n    //Validar si ambos campos están llenos.\r\n    if (currency.trim() === '' || cryptocurrency.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    //Pasar los datos al componente principal\r\n    setError(false);\r\n    setCurrency(currency);\r\n    setCryptocurrency(cryptocurrency);\r\n  };\r\n\r\n  return (\r\n    <form action=\"\" onSubmit={quoteCurrency}>\r\n      {error ? <Error message=\"All fields are required.\" /> : null}\r\n      <SelectCurrency />\r\n      <SelectCryptocurrency />\r\n      <Button type=\"submit\" value=\"Calculate\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  setCurrency: PropTypes.func.isRequired,\r\n  setCryptocurrency: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ResultContainer = styled.div`\r\n  color: #fff;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Info = styled.p`\r\n  font-size: 18px;\r\n`;\r\n\r\nconst Price = styled.p`\r\n  font-size: 30px;\r\n`;\r\n\r\nconst Quotation = ({ result }) => {\r\n  if (Object.keys(result).length === 0) return null;\r\n  return (\r\n    <ResultContainer>\r\n      <Price>\r\n        The price is: <span>{result.PRICE}</span>\r\n      </Price>\r\n      <Info>\r\n        Highest price of the day: <span>{result.HIGHDAY}</span>\r\n      </Info>\r\n      <Info>\r\n        Lowest price of the day: <span>{result.LOWDAY}</span>\r\n      </Info>\r\n      <Info>\r\n        Variation last 24 hours: <span>{result.CHANGEPCT24HOUR}</span>\r\n      </Info>\r\n      <Info>\r\n        Last update: <span>{result.LASTUPDATE}</span>\r\n      </Info>\r\n    </ResultContainer>\r\n  );\r\n};\r\n\r\nQuotation.propTypes = {\r\n  result: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Quotation;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"sk-folding-cube\">\r\n      <div className=\"sk-cube1 sk-cube\"></div>\r\n      <div className=\"sk-cube2 sk-cube\"></div>\r\n      <div className=\"sk-cube4 sk-cube\"></div>\r\n      <div className=\"sk-cube3 sk-cube\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport image from './cryptomonedas.png';\r\nimport Form from './components/Form.jsx';\r\nimport Quotation from './components/Quotation.jsx';\r\nimport Spinner from './components/Spinner.jsx';\r\nimport axios from 'axios';\r\n\r\nconst Container = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  @media (min-width: 992px) {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    column-gap: 2rem;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img`\r\n  max-width: 100%;\r\n  margin-top: 5rem;\r\n`;\r\n\r\nconst MainHeader = styled.h1`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #fff;\r\n  text-align: left;\r\n  font-weight: 700;\r\n  font-size: 50px;\r\n  margin-bottom: 50px;\r\n  margin-top: 80px;\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 100px;\r\n    height: 6px;\r\n    background-color: #66a2fe;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const [currency, setCurrency] = useState('');\r\n  const [cryptocurrency, setCryptocurrency] = useState('');\r\n  const [result, setResult] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    const quoteCryptocurrency = async () => {\r\n      // Se evita la ejecución por primera vez\r\n      if (currency === '') return;\r\n\r\n      //Consultar la API para obtener cotización\r\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptocurrency}&tsyms=${currency}`;\r\n      const result = await axios.get(url);\r\n\r\n      // Mostrar el spinner\r\n      setLoading(true);\r\n\r\n      // Ocultar el spinner y mostrar resultado\r\n      setTimeout(() => {\r\n        // Cambiar el estado de loading\r\n        setLoading(false);\r\n        //Guardar cotización\r\n        setResult(result.data.DISPLAY[cryptocurrency][currency]);\r\n      }, 3000);\r\n    };\r\n    quoteCryptocurrency();\r\n  }, [currency, cryptocurrency]);\r\n\r\n  // Mostrar spinner o resultado\r\n  const component = loading ? <Spinner /> : <Quotation result={result} />;\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"\">\r\n        <Image src={image} alt=\"crypto image\" />\r\n      </div>\r\n      <div className=\"\">\r\n        <MainHeader>Quote cryptocurrencies instantly</MainHeader>\r\n        <Form setCurrency={setCurrency} setCryptocurrency={setCryptocurrency} />\r\n        {component}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}